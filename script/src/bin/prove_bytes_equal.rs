//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can be verified
//! on-chain.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --package fibonacci-script --bin prove --release
//! ```

use clap::Parser;
use sp1_sdk::{ProverClient, SP1Stdin};
use tracing::info;

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
///
/// This file is generated by running `cargo prove build` inside the `program` directory.
pub const BYTES_EQ: &[u8] = include_bytes!("../../../bytes_op/elf/riscv32im-succinct-zkvm-elf");

/// The arguments for the prove command.
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct ProveArgs {
    #[clap(long, default_value = "1024")]
    n: usize,

    #[clap(long, default_value = "false")]
    evm: bool,
}

fn main() {
    // Setup the logger.
    sp1_sdk::utils::setup_logger();

    // Parse the command line arguments.
    let args = ProveArgs::parse();

    // Setup the prover client.
    let client = ProverClient::new();

    // Setup the program.
    let (pk, vk) = client.setup(BYTES_EQ);

    // Setup the inputs.;
    let mut stdin = SP1Stdin::new();
    let left_bytes = vec![1; 20 * 96 * args.n];
    let right_bytes = vec![1; 20 * 96 * args.n];

    stdin.write_vec(left_bytes);
    stdin.write_vec(right_bytes);

    info!("n: {}", args.n);

    if args.evm {
        // Generate the proof.
        let proof = client
            .prove(&pk, stdin)
            .plonk()
            .run()
            .expect("failed to generate proof");

        client.verify(&proof, &vk).expect("failed to verify proof");
    } else {
        // Generate the proof.
        let proof = client.prove(&pk, stdin).compressed().run().expect("failed to generate proof");

        // Verify the proof.
        client.verify(&proof, &vk).expect("failed to verify proof");
    }

    info!("Successfully generated and verify proof!");
}
